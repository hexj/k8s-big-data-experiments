package com.pfe.k8stestapp.demo.userdb;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import sun.applet.Main;

import java.util.Optional;
import java.util.stream.StreamSupport;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/get")
    public @ResponseBody User getUser(@RequestParam String name)
    {
        Optional<User> user = Optional.empty();
        try {
            user = StreamSupport.stream(userRepository.findAll().spliterator(), false)
                    .filter(u -> u.getName().equals(name))
                    .findFirst();
        } catch (Exception e) {
            return new User();
        }

        if(user.isPresent())
            return user.get();
        else
            return new User();
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @RequestMapping("/health")
    public ResponseEntity<MainController> health()
    {
       try {
            userRepository.count();
        } catch (Exception e)
        {
            return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(null);
        }

        return ResponseEntity.status(HttpStatus.OK).body(null);
    }
}